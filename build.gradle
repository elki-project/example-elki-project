plugins { id "com.github.johnrengelman.shadow" version "7.1.2" }
apply plugin: 'java'

group = 'example'
version = '0.8.0'
description = """ELKI Example Project"""

// You may choose to use a newer Java version here:
sourceCompatibility = 1.11
targetCompatibility = 1.11
compileJava.options.encoding = 'UTF-8'

repositories { mavenCentral() }

dependencies {
    // All the core parts
    implementation group: 'io.github.elki-project', name: 'elki', version: '0.8.0'
    // If you want to use visualization:
    implementation group: 'io.github.elki-project', name: 'elki-batik-visualization', version: '0.8.0'
}

// Check for missing service file entries:
task serviceFiles(type: JavaExec, dependsOn: classes) {
  description "Generate ELKI service files automatically"
  group "Build"
  classpath sourceSets.test.runtimeClasspath
  mainClass = "elki.application.internal.CheckELKIServices"
  args "-update"
  args "${projectDir}/src/main/resources"
}
jar.dependsOn serviceFiles

// Jar file
jar {
  manifest {
    attributes(
      "Main-Class" : "elki.application.ELKILauncher",
      "Class-Path": configurations.runtimeClasspath.collect { "lib/"+it.getName() }.join(' ')
    )
  }
}

// Build a standalone jar file:
shadowJar {
  dependsOn jar
  from jar.outputs.files // To include the bundle jar with above notices!
  configurations = [ project.configurations.runtimeClasspath ]
  destinationDirectory = project.rootDir
  classifier = null
  manifest {
    attributes("Class-Path" : "")
  }
  mergeServiceFiles { path = "META-INF/services" } // Batik
  mergeServiceFiles { path = "META-INF/elki" }
}

assemble.dependsOn shadowJar
artifacts.archives shadowJar
